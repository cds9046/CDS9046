/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.5
 * Generated at: 2020-12-24 01:08:43 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class login_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<script src=\"https://t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js\"></script>\r\n");
      out.write("<script src=\"http://code.jquery.com/jquery-3.1.1.min.js\"></script>\r\n");
      out.write("<script src=\"https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/3.0.1/handlebars.js\"></script>\r\n");
      out.write("<script\r\n");
      out.write("   src=\"https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/3.0.1/handlebars.js\"></script>\r\n");
      out.write("<title>login</title>\r\n");
      out.write("   <style>\r\n");
      out.write("* {\r\n");
      out.write("   box-sizing: border-box;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("body {\r\n");
      out.write("   font-family: Helvetica;\r\n");
      out.write("   background: #eee;\r\n");
      out.write("   -webkit-font-smoothing: antialiased;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("hgroup {\r\n");
      out.write("   text-align: center;\r\n");
      out.write("   margin-top: 4em;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("h1, h3 {\r\n");
      out.write("   font-weight: 300;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("h1 {\r\n");
      out.write("   color: #636363;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("h3 {\r\n");
      out.write("   color: #4a89dc;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("form {\r\n");
      out.write("   width: 380px; /* 위스를 변경하면 모든줄이 늘이난다. */\r\n");
      out.write("   margin: 4em auto;\r\n");
      out.write("   padding: 3em 2em 2em 2em;\r\n");
      out.write("   background: rgba(255,255,255,0.7);\r\n");
      out.write("   border: 1px solid #ebebeb;\r\n");
      out.write("   box-shadow: rgba(0, 0, 0, 0.14902) 0px 1px 1px 0px,\r\n");
      out.write("      rgba(0, 0, 0, 0.09804) 0px 1px 2px 0px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".group {\r\n");
      out.write("   position: relative;\r\n");
      out.write("   margin-bottom: 45px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".input2 {\r\n");
      out.write("   font-size: 18px;\r\n");
      out.write("   padding: 10px 10px 10px 5px;\r\n");
      out.write("   -webkit-appearance: none;\r\n");
      out.write("   display: block;\r\n");
      out.write("   background: #fafafa;\r\n");
      out.write("   color: #636363;\r\n");
      out.write("   width: 100%;\r\n");
      out.write("   border: none;\r\n");
      out.write("   border-radius: 0;\r\n");
      out.write("   border-bottom: 1px solid #757575;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".input2:focus {\r\n");
      out.write("   outline: none;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* Label */\r\n");
      out.write("label {\r\n");
      out.write("   color: #999;\r\n");
      out.write("   font-size: 18px;\r\n");
      out.write("   font-weight: normal;\r\n");
      out.write("   position: absolute;\r\n");
      out.write("   pointer-events: none;\r\n");
      out.write("   left: 5px;\r\n");
      out.write("   top: 10px;\r\n");
      out.write("   transition: all 0.2s ease; /* 클릭시 이동하는 속도 */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* active */\r\n");
      out.write(".input2:focus ~ label, .input2.used ~ label {\r\n");
      out.write("   top: -20px;\r\n");
      out.write("   transform: scale(.75);\r\n");
      out.write("   left: -2px;\r\n");
      out.write("   /* font-size: 14px; */\r\n");
      out.write("   color: #4a89dc; /* 클릭시 위로 올라갔을때 색상 */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* Underline */\r\n");
      out.write(".bar {\r\n");
      out.write("   position: relative;\r\n");
      out.write("   display: block;\r\n");
      out.write("   width: 100%; /* 클릭시 생성되는 텍스트상자의 하단 줄 */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".bar:before, .bar:after {\r\n");
      out.write("   content: '';\r\n");
      out.write("   height: 2px;\r\n");
      out.write("   width: 0;\r\n");
      out.write("   bottom: 1px;\r\n");
      out.write("   position: absolute;\r\n");
      out.write("   background: #4a89dc;\r\n");
      out.write("   transition: all 0.2s ease;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".bar:before {\r\n");
      out.write("   left: 50%;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".bar:after {\r\n");
      out.write("   right: 50%;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* active */\r\n");
      out.write(".input2:focus ~ .bar:before, .input2:focus ~ .bar:after {\r\n");
      out.write("   width: 50%;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* 클릭시 생성되는 가로의 바 */\r\n");
      out.write(".highlight {\r\n");
      out.write("   position: absolute;\r\n");
      out.write("   height: 60%;\r\n");
      out.write("   width: 100%; /* 클릭시 생성되는 가로의 바의 길이 */\r\n");
      out.write("   top: 25%;\r\n");
      out.write("   left: 0;\r\n");
      out.write("   pointer-events: none;\r\n");
      out.write("   opacity: 0.5; /* 클릭시 생성되는 가로의 바의 시간 */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* active */\r\n");
      out.write(".input2:focus ~ .highlight {\r\n");
      out.write("   animation: inputHighlighter 0.3s ease;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* Animations */\r\n");
      out.write("@\r\n");
      out.write("keyframes inputHighlighter {from { background:#4a89dc;\r\n");
      out.write("   \r\n");
      out.write("} /* 텍스트 창 클릭시 배경색 */\r\n");
      out.write("to {\r\n");
      out.write("   width: 0;\r\n");
      out.write("   background: transparent;\r\n");
      out.write("} /* 텍스트 창 클릭시 배경색 (돌아올떄)*/\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* Button */\r\n");
      out.write(".button {\r\n");
      out.write("   position: relative;\r\n");
      out.write("   display: inline-block;\r\n");
      out.write("   padding: 12px 24px;\r\n");
      out.write("   margin: .3em 0 1em 0;\r\n");
      out.write("   width: 100%;\r\n");
      out.write("   vertical-align: middle;\r\n");
      out.write("   color: #fff; /* 버튼안의 택스트 글자색 */\r\n");
      out.write("   font-size: 16px;\r\n");
      out.write("   line-height: 20px;\r\n");
      out.write("   -webkit-font-smoothing: antialiased;\r\n");
      out.write("   text-align: center;\r\n");
      out.write("   letter-spacing: 1px;\r\n");
      out.write("   background: transparent;\r\n");
      out.write("   border: 0;\r\n");
      out.write("   border-bottom: 2px solid #3160B6;\r\n");
      out.write("   cursor: pointer;\r\n");
      out.write("   transition: all 0.15s ease;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".button:focus {\r\n");
      out.write("   outline: 0;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* Button modifiers */\r\n");
      out.write(".buttonBlue {\r\n");
      out.write("   background: #4a89dc; /* 버튼 색상 */\r\n");
      out.write("   text-shadow: 1px 1px 0 rgba(39, 110, 204, .5);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".buttonBlue:hover {\r\n");
      out.write("   background: #357bd8;\r\n");
      out.write("} /* 버튼 색상 */\r\n");
      out.write("\r\n");
      out.write("/* Ripples container */\r\n");
      out.write(".ripples {\r\n");
      out.write("   position: absolute;\r\n");
      out.write("   top: 0;\r\n");
      out.write("   left: 0;\r\n");
      out.write("   width: 100%;\r\n");
      out.write("   height: 100%;\r\n");
      out.write("   overflow: hidden;\r\n");
      out.write("   background: transparent;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* 물결의 원형 */\r\n");
      out.write(".ripplesCircle {\r\n");
      out.write("   position: absolute;\r\n");
      out.write("   top: 50%;\r\n");
      out.write("   left: 50%;\r\n");
      out.write("   transform: translate(-50%, -50%);\r\n");
      out.write("   opacity: 0;\r\n");
      out.write("   width: 0;\r\n");
      out.write("   height: 0;\r\n");
      out.write("   border-radius: 50%;\r\n");
      out.write("   background: rgba(255, 255, 255, 0.25);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".ripples.is-active .ripplesCircle {\r\n");
      out.write("   animation: ripples .4s ease-in;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* 물결애니메이션 */\r\n");
      out.write("@\r\n");
      out.write("keyframes ripples { 0% {\r\n");
      out.write("   opacity: 0;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("25%\r\n");
      out.write("{\r\n");
      out.write("opacity\r\n");
      out.write(":\r\n");
      out.write(" \r\n");
      out.write("1;\r\n");
      out.write("}\r\n");
      out.write("100%\r\n");
      out.write("{\r\n");
      out.write("width\r\n");
      out.write(":\r\n");
      out.write(" \r\n");
      out.write("200%; /*물결의 세로 */\r\n");
      out.write("padding-bottom\r\n");
      out.write(":\r\n");
      out.write(" \r\n");
      out.write("200%; /* 물결의 가로 */\r\n");
      out.write("opacity\r\n");
      out.write(":\r\n");
      out.write(" \r\n");
      out.write("0; /* 물결의 느낌이 숫자가 높으면 이상해진다 */\r\n");
      out.write("}\r\n");
      out.write("}\r\n");
      out.write("footer {\r\n");
      out.write("   text-align: center;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("footer p { /* 하단에 p태그안의 택스트 */\r\n");
      out.write("   color: #888;\r\n");
      out.write("   font-size: 13px;\r\n");
      out.write("   letter-spacing: .4px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("footer a {\r\n");
      out.write("   color: #4a89dc; /* 하단에 링크의 색상 */\r\n");
      out.write("   text-decoration: none;\r\n");
      out.write("   transition: all .2s ease;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("footer a:hover {\r\n");
      out.write("   color: #666; /* 하단에 링크가 호버 됐을때 색상 */\r\n");
      out.write("   text-decoration: underline;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("footer img {\r\n");
      out.write("   width: 80px;\r\n");
      out.write("   transition: all 0.2s ease; /* 하단에 이미지의 색이 변하는 시간 */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("footer img:hover {\r\n");
      out.write("   opacity: 0.7;\r\n");
      out.write("} /* 하단에 이미지의 호버됐을 때 불투명도 (max 1) */\r\n");
      out.write("footer img:focus, footer a:focus {\r\n");
      out.write("   outline: none;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".log {\r\n");
      out.write("   width: 171px;\r\n");
      out.write("   height: 56px;\r\n");
      out.write("   background: url(resources/images/3.png) no-repeat;\r\n");
      out.write("   display: inline-block;\r\n");
      out.write("   margin-top: 25px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("canvas {\r\n");
      out.write("   padding: 0;\r\n");
      out.write("   margin: 0;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("div.btnbg {\r\n");
      out.write("   position: absolute;\r\n");
      out.write("   left: 50%;\r\n");
      out.write("   top: 50%;\r\n");
      out.write("   transform: translate(-50%, -50%)\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body style=\" margin: 0;\">\r\n");
      out.write("<canvas id=\"sakura\"></canvas>\r\n");
      out.write("<div class=\"btnbg\">\r\n");
      out.write("  <div style=\"text-align: center;\">\r\n");
      out.write("      <a href=\"/\" class=\"log\"></a>\r\n");
      out.write("  </div>\r\n");
      out.write("<form name=\"frm\" action=\"login\" method=\"post\">\r\n");
      out.write("  <div class=\"group\">\r\n");
      out.write("    <input type=\"text\" name=\"id\" class=\"input2\"><span class=\"highlight\"></span><span class=\"bar\"></span>\r\n");
      out.write("    <label>ID</label>\r\n");
      out.write("  </div>\r\n");
      out.write("  <div class=\"group\">\r\n");
      out.write("    <input type=\"password\" name=\"pw\"  class=\"input2\"><span class=\"highlight\"></span><span class=\"bar\"></span>\r\n");
      out.write("    <label>Password</label>\r\n");
      out.write("  </div>\r\n");
      out.write("   \r\n");
      out.write("  <input style=\"margin-bottom:25px\" class=\"chk\" type=\"checkbox\" name=\"chkLogin\">로그인 상태유지\r\n");
      out.write("  \r\n");
      out.write("  <!-- 로그인 버튼 --> \r\n");
      out.write("   <button class=\"button buttonBlue\">로그인\r\n");
      out.write("    <div class=\"ripples buttonRipples\">\r\n");
      out.write("       <span class=\"ripplesCircle\"></span>\r\n");
      out.write("    </div>\r\n");
      out.write("  </button> \r\n");
      out.write("  <!-- 회원 등록 버튼 -->\r\n");
      out.write("    <button id=\"signupPage\" class=\"button buttonBlue\">회원가입\r\n");
      out.write("       <div class=\"ripples buttonRipples\">\r\n");
      out.write("          <span class=\"ripplesCircle\"></span>\r\n");
      out.write("       </div>\r\n");
      out.write("     </button>   \r\n");
      out.write("</form>\r\n");
      out.write("</div>\r\n");
      out.write("<script id=\"sakura_point_vsh\" type=\"x-shader/x_vertex\">\r\n");
      out.write("uniform mat4 uProjection;\r\n");
      out.write("uniform mat4 uModelview;\r\n");
      out.write("uniform vec3 uResolution;\r\n");
      out.write("uniform vec3 uOffset;\r\n");
      out.write("uniform vec3 uDOF;  //x:focus distance, y:focus radius, z:max radius\r\n");
      out.write("uniform vec3 uFade; //x:start distance, y:half distance, z:near fade start\r\n");
      out.write("\r\n");
      out.write("attribute vec3 aPosition;\r\n");
      out.write("attribute vec3 aEuler;\r\n");
      out.write("attribute vec2 aMisc; //x:size, y:fade\r\n");
      out.write("\r\n");
      out.write("varying vec3 pposition;\r\n");
      out.write("varying float psize;\r\n");
      out.write("varying float palpha;\r\n");
      out.write("varying float pdist;\r\n");
      out.write("\r\n");
      out.write("//varying mat3 rotMat;\r\n");
      out.write("varying vec3 normX;\r\n");
      out.write("varying vec3 normY;\r\n");
      out.write("varying vec3 normZ;\r\n");
      out.write("varying vec3 normal;\r\n");
      out.write("\r\n");
      out.write("varying float diffuse;\r\n");
      out.write("varying float specular;\r\n");
      out.write("varying float rstop;\r\n");
      out.write("varying float distancefade;\r\n");
      out.write("\r\n");
      out.write("void main(void) {\r\n");
      out.write("    // Projection is based on vertical angle\r\n");
      out.write("    vec4 pos = uModelview * vec4(aPosition + uOffset, 1.0);\r\n");
      out.write("    gl_Position = uProjection * pos;\r\n");
      out.write("    gl_PointSize = aMisc.x * uProjection[1][1] / -pos.z * uResolution.y * 0.5;\r\n");
      out.write("    \r\n");
      out.write("    pposition = pos.xyz;\r\n");
      out.write("    psize = aMisc.x;\r\n");
      out.write("    pdist = length(pos.xyz);\r\n");
      out.write("    palpha = smoothstep(0.0, 1.0, (pdist - 0.1) / uFade.z);\r\n");
      out.write("    \r\n");
      out.write("    vec3 elrsn = sin(aEuler);\r\n");
      out.write("    vec3 elrcs = cos(aEuler);\r\n");
      out.write("    mat3 rotx = mat3(\r\n");
      out.write("        1.0, 0.0, 0.0,\r\n");
      out.write("        0.0, elrcs.x, elrsn.x,\r\n");
      out.write("        0.0, -elrsn.x, elrcs.x\r\n");
      out.write("    );\r\n");
      out.write("    mat3 roty = mat3(\r\n");
      out.write("        elrcs.y, 0.0, -elrsn.y,\r\n");
      out.write("        0.0, 1.0, 0.0,\r\n");
      out.write("        elrsn.y, 0.0, elrcs.y\r\n");
      out.write("    );\r\n");
      out.write("    mat3 rotz = mat3(\r\n");
      out.write("        elrcs.z, elrsn.z, 0.0, \r\n");
      out.write("        -elrsn.z, elrcs.z, 0.0,\r\n");
      out.write("        0.0, 0.0, 1.0\r\n");
      out.write("    );\r\n");
      out.write("    mat3 rotmat = rotx * roty * rotz;\r\n");
      out.write("    normal = rotmat[2];\r\n");
      out.write("    \r\n");
      out.write("    mat3 trrotm = mat3(\r\n");
      out.write("        rotmat[0][0], rotmat[1][0], rotmat[2][0],\r\n");
      out.write("        rotmat[0][1], rotmat[1][1], rotmat[2][1],\r\n");
      out.write("        rotmat[0][2], rotmat[1][2], rotmat[2][2]\r\n");
      out.write("    );\r\n");
      out.write("    normX = trrotm[0];\r\n");
      out.write("    normY = trrotm[1];\r\n");
      out.write("    normZ = trrotm[2];\r\n");
      out.write("    \r\n");
      out.write("    const vec3 lit = vec3(0.6917144638660746, 0.6917144638660746, -0.20751433915982237);\r\n");
      out.write("    \r\n");
      out.write("    float tmpdfs = dot(lit, normal);\r\n");
      out.write("    if(tmpdfs < 0.0) {\r\n");
      out.write("        normal = -normal;\r\n");
      out.write("        tmpdfs = dot(lit, normal);\r\n");
      out.write("    }\r\n");
      out.write("    diffuse = 0.4 + tmpdfs;\r\n");
      out.write("    \r\n");
      out.write("    vec3 eyev = normalize(-pos.xyz);\r\n");
      out.write("    if(dot(eyev, normal) > 0.0) {\r\n");
      out.write("        vec3 hv = normalize(eyev + lit);\r\n");
      out.write("        specular = pow(max(dot(hv, normal), 0.0), 20.0);\r\n");
      out.write("    }\r\n");
      out.write("    else {\r\n");
      out.write("        specular = 0.0;\r\n");
      out.write("    }\r\n");
      out.write("    \r\n");
      out.write("    rstop = clamp((abs(pdist - uDOF.x) - uDOF.y) / uDOF.z, 0.0, 1.0);\r\n");
      out.write("    rstop = pow(rstop, 0.5);\r\n");
      out.write("    //-0.69315 = ln(0.5)\r\n");
      out.write("    distancefade = min(1.0, exp((uFade.x - pdist) * 0.69315 / uFade.y));\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("<script id=\"sakura_point_fsh\" type=\"x-shader/x_fragment\">\r\n");
      out.write("#ifdef GL_ES\r\n");
      out.write("//precision mediump float;\r\n");
      out.write("precision highp float;\r\n");
      out.write("#endif\r\n");
      out.write("\r\n");
      out.write("uniform vec3 uDOF;  //x:focus distance, y:focus radius, z:max radius\r\n");
      out.write("uniform vec3 uFade; //x:start distance, y:half distance, z:near fade start\r\n");
      out.write("\r\n");
      out.write("const vec3 fadeCol = vec3(0.08, 0.03, 0.06);\r\n");
      out.write("\r\n");
      out.write("varying vec3 pposition;\r\n");
      out.write("varying float psize;\r\n");
      out.write("varying float palpha;\r\n");
      out.write("varying float pdist;\r\n");
      out.write("\r\n");
      out.write("//varying mat3 rotMat;\r\n");
      out.write("varying vec3 normX;\r\n");
      out.write("varying vec3 normY;\r\n");
      out.write("varying vec3 normZ;\r\n");
      out.write("varying vec3 normal;\r\n");
      out.write("\r\n");
      out.write("varying float diffuse;\r\n");
      out.write("varying float specular;\r\n");
      out.write("varying float rstop;\r\n");
      out.write("varying float distancefade;\r\n");
      out.write("\r\n");
      out.write("float ellipse(vec2 p, vec2 o, vec2 r) {\r\n");
      out.write("    vec2 lp = (p - o) / r;\r\n");
      out.write("    return length(lp) - 1.0;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("void main(void) {\r\n");
      out.write("    vec3 p = vec3(gl_PointCoord - vec2(0.5, 0.5), 0.0) * 2.0;\r\n");
      out.write("    vec3 d = vec3(0.0, 0.0, -1.0);\r\n");
      out.write("    float nd = normZ.z; //dot(-normZ, d);\r\n");
      out.write("    if(abs(nd) < 0.0001) discard;\r\n");
      out.write("    \r\n");
      out.write("    float np = dot(normZ, p);\r\n");
      out.write("    vec3 tp = p + d * np / nd;\r\n");
      out.write("    vec2 coord = vec2(dot(normX, tp), dot(normY, tp));\r\n");
      out.write("    \r\n");
      out.write("    //angle = 15 degree\r\n");
      out.write("    const float flwrsn = 0.258819045102521;\r\n");
      out.write("    const float flwrcs = 0.965925826289068;\r\n");
      out.write("    mat2 flwrm = mat2(flwrcs, -flwrsn, flwrsn, flwrcs);\r\n");
      out.write("    vec2 flwrp = vec2(abs(coord.x), coord.y) * flwrm;\r\n");
      out.write("    \r\n");
      out.write("    float r;\r\n");
      out.write("    if(flwrp.x < 0.0) {\r\n");
      out.write("        r = ellipse(flwrp, vec2(0.065, 0.024) * 0.5, vec2(0.36, 0.96) * 0.5);\r\n");
      out.write("    }\r\n");
      out.write("    else {\r\n");
      out.write("        r = ellipse(flwrp, vec2(0.065, 0.024) * 0.5, vec2(0.58, 0.96) * 0.5);\r\n");
      out.write("    }\r\n");
      out.write("    \r\n");
      out.write("    if(r > rstop) discard;\r\n");
      out.write("    \r\n");
      out.write("    vec3 col = mix(vec3(1.0, 0.8, 0.75), vec3(1.0, 0.9, 0.87), r);\r\n");
      out.write("    float grady = mix(0.0, 1.0, pow(coord.y * 0.5 + 0.5, 0.35));\r\n");
      out.write("    col *= vec3(1.0, grady, grady);\r\n");
      out.write("    col *= mix(0.8, 1.0, pow(abs(coord.x), 0.3));\r\n");
      out.write("    col = col * diffuse + specular;\r\n");
      out.write("    \r\n");
      out.write("    col = mix(fadeCol, col, distancefade);\r\n");
      out.write("    \r\n");
      out.write("    float alpha = (rstop > 0.001)? (0.5 - r / (rstop * 2.0)) : 1.0;\r\n");
      out.write("    alpha = smoothstep(0.0, 1.0, alpha) * palpha;\r\n");
      out.write("    \r\n");
      out.write("    gl_FragColor = vec4(col * 0.5, alpha);\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("<!-- effects -->\r\n");
      out.write("<script id=\"fx_common_vsh\" type=\"x-shader/x_vertex\">\r\n");
      out.write("uniform vec3 uResolution;\r\n");
      out.write("attribute vec2 aPosition;\r\n");
      out.write("\r\n");
      out.write("varying vec2 texCoord;\r\n");
      out.write("varying vec2 screenCoord;\r\n");
      out.write("\r\n");
      out.write("void main(void) {\r\n");
      out.write("    gl_Position = vec4(aPosition, 0.0, 1.0);\r\n");
      out.write("    texCoord = aPosition.xy * 0.5 + vec2(0.5, 0.5);\r\n");
      out.write("    screenCoord = aPosition.xy * vec2(uResolution.z, 1.0);\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("<script id=\"bg_fsh\" type=\"x-shader/x_fragment\">\r\n");
      out.write("#ifdef GL_ES\r\n");
      out.write("//precision mediump float;\r\n");
      out.write("precision highp float;\r\n");
      out.write("#endif\r\n");
      out.write("\r\n");
      out.write("uniform vec2 uTimes;\r\n");
      out.write("\r\n");
      out.write("varying vec2 texCoord;\r\n");
      out.write("varying vec2 screenCoord;\r\n");
      out.write("\r\n");
      out.write("void main(void) {\r\n");
      out.write("    vec3 col;\r\n");
      out.write("    float c;\r\n");
      out.write("    vec2 tmpv = texCoord * vec2(0.8, 1.0) - vec2(0.95, 1.0);\r\n");
      out.write("    c = exp(-pow(length(tmpv) * 1.8, 2.0));\r\n");
      out.write("    col = mix(vec3(0.02, 0.0, 0.03), vec3(0.96, 0.98, 1.0) * 1.5, c);\r\n");
      out.write("    gl_FragColor = vec4(col * 0.5, 1.0);\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("<script id=\"fx_brightbuf_fsh\" type=\"x-shader/x_fragment\">\r\n");
      out.write("#ifdef GL_ES\r\n");
      out.write("//precision mediump float;\r\n");
      out.write("precision highp float;\r\n");
      out.write("#endif\r\n");
      out.write("uniform sampler2D uSrc;\r\n");
      out.write("uniform vec2 uDelta;\r\n");
      out.write("\r\n");
      out.write("varying vec2 texCoord;\r\n");
      out.write("varying vec2 screenCoord;\r\n");
      out.write("\r\n");
      out.write("void main(void) {\r\n");
      out.write("    vec4 col = texture2D(uSrc, texCoord);\r\n");
      out.write("    gl_FragColor = vec4(col.rgb * 2.0 - vec3(0.5), 1.0);\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("<script id=\"fx_dirblur_r4_fsh\" type=\"x-shader/x_fragment\">\r\n");
      out.write("#ifdef GL_ES\r\n");
      out.write("//precision mediump float;\r\n");
      out.write("precision highp float;\r\n");
      out.write("#endif\r\n");
      out.write("uniform sampler2D uSrc;\r\n");
      out.write("uniform vec2 uDelta;\r\n");
      out.write("uniform vec4 uBlurDir; //dir(x, y), stride(z, w)\r\n");
      out.write("\r\n");
      out.write("varying vec2 texCoord;\r\n");
      out.write("varying vec2 screenCoord;\r\n");
      out.write("\r\n");
      out.write("void main(void) {\r\n");
      out.write("    vec4 col = texture2D(uSrc, texCoord);\r\n");
      out.write("    col = col + texture2D(uSrc, texCoord + uBlurDir.xy * uDelta);\r\n");
      out.write("    col = col + texture2D(uSrc, texCoord - uBlurDir.xy * uDelta);\r\n");
      out.write("    col = col + texture2D(uSrc, texCoord + (uBlurDir.xy + uBlurDir.zw) * uDelta);\r\n");
      out.write("    col = col + texture2D(uSrc, texCoord - (uBlurDir.xy + uBlurDir.zw) * uDelta);\r\n");
      out.write("    gl_FragColor = col / 5.0;\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("<!-- effect fragment shader template -->\r\n");
      out.write("<script id=\"fx_common_fsh\" type=\"x-shader/x_fragment\">\r\n");
      out.write("#ifdef GL_ES\r\n");
      out.write("//precision mediump float;\r\n");
      out.write("precision highp float;\r\n");
      out.write("#endif\r\n");
      out.write("uniform sampler2D uSrc;\r\n");
      out.write("uniform vec2 uDelta;\r\n");
      out.write("\r\n");
      out.write("varying vec2 texCoord;\r\n");
      out.write("varying vec2 screenCoord;\r\n");
      out.write("\r\n");
      out.write("void main(void) {\r\n");
      out.write("    gl_FragColor = texture2D(uSrc, texCoord);\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("<!-- post processing -->\r\n");
      out.write("<script id=\"pp_final_vsh\" type=\"x-shader/x_vertex\">\r\n");
      out.write("uniform vec3 uResolution;\r\n");
      out.write("attribute vec2 aPosition;\r\n");
      out.write("varying vec2 texCoord;\r\n");
      out.write("varying vec2 screenCoord;\r\n");
      out.write("void main(void) {\r\n");
      out.write("    gl_Position = vec4(aPosition, 0.0, 1.0);\r\n");
      out.write("    texCoord = aPosition.xy * 0.5 + vec2(0.5, 0.5);\r\n");
      out.write("    screenCoord = aPosition.xy * vec2(uResolution.z, 1.0);\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("<script id=\"pp_final_fsh\" type=\"x-shader/x_fragment\">\r\n");
      out.write("#ifdef GL_ES\r\n");
      out.write("//precision mediump float;\r\n");
      out.write("precision highp float;\r\n");
      out.write("#endif\r\n");
      out.write("uniform sampler2D uSrc;\r\n");
      out.write("uniform sampler2D uBloom;\r\n");
      out.write("uniform vec2 uDelta;\r\n");
      out.write("varying vec2 texCoord;\r\n");
      out.write("varying vec2 screenCoord;\r\n");
      out.write("void main(void) {\r\n");
      out.write("    vec4 srccol = texture2D(uSrc, texCoord) * 2.0;\r\n");
      out.write("    vec4 bloomcol = texture2D(uBloom, texCoord);\r\n");
      out.write("    vec4 col;\r\n");
      out.write("    col = srccol + bloomcol * (vec4(1.0) + srccol);\r\n");
      out.write("    col *= smoothstep(1.0, 0.0, pow(length((texCoord - vec2(0.5)) * 2.0), 1.2) * 0.5);\r\n");
      out.write("    col = pow(col, vec4(0.45454545454545)); //(1.0 / 2.2)\r\n");
      out.write("    \r\n");
      out.write("    gl_FragColor = vec4(col.rgb, 1.0);\r\n");
      out.write("    gl_FragColor.a = 1.0;\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("<script>\r\n");
      out.write("   $(\"#signupPage\").on(\"click\",function(e){\r\n");
      out.write("      e.preventDefault();\r\n");
      out.write("      location.href=\"signup\";\r\n");
      out.write("   })\r\n");
      out.write("   \r\n");
      out.write("      $(frm).submit(function(e){\r\n");
      out.write("         e.preventDefault();\r\n");
      out.write("         var pw=$(frm.pw).val();\r\n");
      out.write("         var id=$(frm.id).val();\r\n");
      out.write("         var chkLogin=$(frm.chkLogin).is(\":checked\")? true:false;\r\n");
      out.write("         $.ajax({\r\n");
      out.write("         type:\"post\",\r\n");
      out.write("         url:\"login.json\",\r\n");
      out.write("              data:{\"id\":id , \"pw\":pw, \"chkLogin\" :chkLogin},\r\n");
      out.write("             success:function(data){\r\n");
      out.write("               if(data==0){\r\n");
      out.write("                   alert(\"아이디가 없습니다.\")\r\n");
      out.write("                  }\r\n");
      out.write("                  else if(data==2){\r\n");
      out.write("                     alert(\"비밀번호가 맞지 않습니다.\");\r\n");
      out.write("                  }else{\r\n");
      out.write("                     alert(id+\"님 환영합니다\");\r\n");
      out.write("                     location.href=\"/\";\r\n");
      out.write("                  }\r\n");
      out.write("              }\r\n");
      out.write("         });\r\n");
      out.write("      });\r\n");
      out.write("   \r\n");
      out.write("   // css 일부\r\n");
      out.write("   $(window, document, undefined) .ready( function() {\r\n");
      out.write("      $('input').blur(function() {\r\n");
      out.write("         var $this = $(this);\r\n");
      out.write("         if ($this.val()) $this.addClass('used');\r\n");
      out.write("         else $this.removeClass('used');\r\n");
      out.write("      });\r\n");
      out.write("      var $ripples = $('.ripples');\r\n");
      out.write("      $ripples.on('click.Ripples', function(e) {\r\n");
      out.write("         var $this = $(this);\r\n");
      out.write("         var $offset = $this.parent().offset();\r\n");
      out.write("         var $circle = $this.find('.ripplesCircle');\r\n");
      out.write("         var x = e.pageX - $offset.left;\r\n");
      out.write("         var y = e.pageY - $offset.top;\r\n");
      out.write("         $circle.css({\r\n");
      out.write("            top : y + 'px',\r\n");
      out.write("            left : x + 'px'\r\n");
      out.write("         });\r\n");
      out.write("         $this.addClass('is-active');\r\n");
      out.write("      });\r\n");
      out.write("      $ripples.on('animationend webkitAnimationEnd mozAnimationEnd oanimationend MSAnimationEnd', function(e) {\r\n");
      out.write("         $(this).removeClass('is-active');\r\n");
      out.write("      });\r\n");
      out.write("   });\r\n");
      out.write("// Utilities\r\n");
      out.write("   var Vector3 = {};\r\n");
      out.write("   var Matrix44 = {};\r\n");
      out.write("   Vector3.create = function(x, y, z) {\r\n");
      out.write("       return {'x':x, 'y':y, 'z':z};\r\n");
      out.write("   };\r\n");
      out.write("   Vector3.dot = function (v0, v1) {\r\n");
      out.write("       return v0.x * v1.x + v0.y * v1.y + v0.z * v1.z;\r\n");
      out.write("   };\r\n");
      out.write("   Vector3.cross = function (v, v0, v1) {\r\n");
      out.write("       v.x = v0.y * v1.z - v0.z * v1.y;\r\n");
      out.write("       v.y = v0.z * v1.x - v0.x * v1.z;\r\n");
      out.write("       v.z = v0.x * v1.y - v0.y * v1.x;\r\n");
      out.write("   };\r\n");
      out.write("   Vector3.normalize = function (v) {\r\n");
      out.write("       var l = v.x * v.x + v.y * v.y + v.z * v.z;\r\n");
      out.write("       if(l > 0.00001) {\r\n");
      out.write("           l = 1.0 / Math.sqrt(l);\r\n");
      out.write("           v.x *= l;\r\n");
      out.write("           v.y *= l;\r\n");
      out.write("           v.z *= l;\r\n");
      out.write("       }\r\n");
      out.write("   };\r\n");
      out.write("   Vector3.arrayForm = function(v) {\r\n");
      out.write("       if(v.array) {\r\n");
      out.write("           v.array[0] = v.x;\r\n");
      out.write("           v.array[1] = v.y;\r\n");
      out.write("           v.array[2] = v.z;\r\n");
      out.write("       }\r\n");
      out.write("       else {\r\n");
      out.write("           v.array = new Float32Array([v.x, v.y, v.z]);\r\n");
      out.write("       }\r\n");
      out.write("       return v.array;\r\n");
      out.write("   };\r\n");
      out.write("   Matrix44.createIdentity = function () {\r\n");
      out.write("       return new Float32Array([1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0]);\r\n");
      out.write("   };\r\n");
      out.write("   Matrix44.loadProjection = function (m, aspect, vdeg, near, far) {\r\n");
      out.write("       var h = near * Math.tan(vdeg * Math.PI / 180.0 * 0.5) * 2.0;\r\n");
      out.write("       var w = h * aspect;\r\n");
      out.write("       \r\n");
      out.write("       m[0] = 2.0 * near / w;\r\n");
      out.write("       m[1] = 0.0;\r\n");
      out.write("       m[2] = 0.0;\r\n");
      out.write("       m[3] = 0.0;\r\n");
      out.write("       \r\n");
      out.write("       m[4] = 0.0;\r\n");
      out.write("       m[5] = 2.0 * near / h;\r\n");
      out.write("       m[6] = 0.0;\r\n");
      out.write("       m[7] = 0.0;\r\n");
      out.write("       \r\n");
      out.write("       m[8] = 0.0;\r\n");
      out.write("       m[9] = 0.0;\r\n");
      out.write("       m[10] = -(far + near) / (far - near);\r\n");
      out.write("       m[11] = -1.0;\r\n");
      out.write("       \r\n");
      out.write("       m[12] = 0.0;\r\n");
      out.write("       m[13] = 0.0;\r\n");
      out.write("       m[14] = -2.0 * far * near / (far - near);\r\n");
      out.write("       m[15] = 0.0;\r\n");
      out.write("   };\r\n");
      out.write("   Matrix44.loadLookAt = function (m, vpos, vlook, vup) {\r\n");
      out.write("       var frontv = Vector3.create(vpos.x - vlook.x, vpos.y - vlook.y, vpos.z - vlook.z);\r\n");
      out.write("       Vector3.normalize(frontv);\r\n");
      out.write("       var sidev = Vector3.create(1.0, 0.0, 0.0);\r\n");
      out.write("       Vector3.cross(sidev, vup, frontv);\r\n");
      out.write("       Vector3.normalize(sidev);\r\n");
      out.write("       var topv = Vector3.create(1.0, 0.0, 0.0);\r\n");
      out.write("       Vector3.cross(topv, frontv, sidev);\r\n");
      out.write("       Vector3.normalize(topv);\r\n");
      out.write("       \r\n");
      out.write("       m[0] = sidev.x;\r\n");
      out.write("       m[1] = topv.x;\r\n");
      out.write("       m[2] = frontv.x;\r\n");
      out.write("       m[3] = 0.0;\r\n");
      out.write("       \r\n");
      out.write("       m[4] = sidev.y;\r\n");
      out.write("       m[5] = topv.y;\r\n");
      out.write("       m[6] = frontv.y;\r\n");
      out.write("       m[7] = 0.0;\r\n");
      out.write("       \r\n");
      out.write("       m[8] = sidev.z;\r\n");
      out.write("       m[9] = topv.z;\r\n");
      out.write("       m[10] = frontv.z;\r\n");
      out.write("       m[11] = 0.0;\r\n");
      out.write("       \r\n");
      out.write("       m[12] = -(vpos.x * m[0] + vpos.y * m[4] + vpos.z * m[8]);\r\n");
      out.write("       m[13] = -(vpos.x * m[1] + vpos.y * m[5] + vpos.z * m[9]);\r\n");
      out.write("       m[14] = -(vpos.x * m[2] + vpos.y * m[6] + vpos.z * m[10]);\r\n");
      out.write("       m[15] = 1.0;\r\n");
      out.write("   };\r\n");
      out.write("\r\n");
      out.write("   //\r\n");
      out.write("   var timeInfo = {\r\n");
      out.write("       'start':0, 'prev':0, // Date\r\n");
      out.write("       'delta':0, 'elapsed':0 // Number(sec)\r\n");
      out.write("   };\r\n");
      out.write("\r\n");
      out.write("   //\r\n");
      out.write("   var gl;\r\n");
      out.write("   var renderSpec = {\r\n");
      out.write("       'width':0,\r\n");
      out.write("       'height':0,\r\n");
      out.write("       'aspect':1,\r\n");
      out.write("       'array':new Float32Array(3),\r\n");
      out.write("       'halfWidth':0,\r\n");
      out.write("       'halfHeight':0,\r\n");
      out.write("       'halfArray':new Float32Array(3)\r\n");
      out.write("       // and some render targets. see setViewport()\r\n");
      out.write("   };\r\n");
      out.write("   renderSpec.setSize = function(w, h) {\r\n");
      out.write("       renderSpec.width = w;\r\n");
      out.write("       renderSpec.height = h;\r\n");
      out.write("       renderSpec.aspect = renderSpec.width / renderSpec.height;\r\n");
      out.write("       renderSpec.array[0] = renderSpec.width;\r\n");
      out.write("       renderSpec.array[1] = renderSpec.height;\r\n");
      out.write("       renderSpec.array[2] = renderSpec.aspect;\r\n");
      out.write("       \r\n");
      out.write("       renderSpec.halfWidth = Math.floor(w / 2);\r\n");
      out.write("       renderSpec.halfHeight = Math.floor(h / 2);\r\n");
      out.write("       renderSpec.halfArray[0] = renderSpec.halfWidth;\r\n");
      out.write("       renderSpec.halfArray[1] = renderSpec.halfHeight;\r\n");
      out.write("       renderSpec.halfArray[2] = renderSpec.halfWidth / renderSpec.halfHeight;\r\n");
      out.write("   };\r\n");
      out.write("\r\n");
      out.write("   function deleteRenderTarget(rt) {\r\n");
      out.write("       gl.deleteFramebuffer(rt.frameBuffer);\r\n");
      out.write("       gl.deleteRenderbuffer(rt.renderBuffer);\r\n");
      out.write("       gl.deleteTexture(rt.texture);\r\n");
      out.write("   }\r\n");
      out.write("\r\n");
      out.write("   function createRenderTarget(w, h) {\r\n");
      out.write("       var ret = {\r\n");
      out.write("           'width':w,\r\n");
      out.write("           'height':h,\r\n");
      out.write("           'sizeArray':new Float32Array([w, h, w / h]),\r\n");
      out.write("           'dtxArray':new Float32Array([1.0 / w, 1.0 / h])\r\n");
      out.write("       };\r\n");
      out.write("       ret.frameBuffer = gl.createFramebuffer();\r\n");
      out.write("       ret.renderBuffer = gl.createRenderbuffer();\r\n");
      out.write("       ret.texture = gl.createTexture();\r\n");
      out.write("       \r\n");
      out.write("       gl.bindTexture(gl.TEXTURE_2D, ret.texture);\r\n");
      out.write("       gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, w, h, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\r\n");
      out.write("       gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n");
      out.write("       gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n");
      out.write("       gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n");
      out.write("       gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n");
      out.write("       \r\n");
      out.write("       gl.bindFramebuffer(gl.FRAMEBUFFER, ret.frameBuffer);\r\n");
      out.write("       gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, ret.texture, 0);\r\n");
      out.write("       \r\n");
      out.write("       gl.bindRenderbuffer(gl.RENDERBUFFER, ret.renderBuffer);\r\n");
      out.write("       gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, w, h);\r\n");
      out.write("       gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, ret.renderBuffer);\r\n");
      out.write("       \r\n");
      out.write("       gl.bindTexture(gl.TEXTURE_2D, null);\r\n");
      out.write("       gl.bindRenderbuffer(gl.RENDERBUFFER, null);\r\n");
      out.write("       gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n");
      out.write("       \r\n");
      out.write("       return ret;\r\n");
      out.write("   }\r\n");
      out.write("\r\n");
      out.write("   function compileShader(shtype, shsrc) {\r\n");
      out.write("      var retsh = gl.createShader(shtype);\r\n");
      out.write("      \r\n");
      out.write("      gl.shaderSource(retsh, shsrc);\r\n");
      out.write("      gl.compileShader(retsh);\r\n");
      out.write("      \r\n");
      out.write("      if(!gl.getShaderParameter(retsh, gl.COMPILE_STATUS)) {\r\n");
      out.write("         var errlog = gl.getShaderInfoLog(retsh);\r\n");
      out.write("         gl.deleteShader(retsh);\r\n");
      out.write("         console.error(errlog);\r\n");
      out.write("         return null;\r\n");
      out.write("      }\r\n");
      out.write("      return retsh;\r\n");
      out.write("   }\r\n");
      out.write("\r\n");
      out.write("   function createShader(vtxsrc, frgsrc, uniformlist, attrlist) {\r\n");
      out.write("       var vsh = compileShader(gl.VERTEX_SHADER, vtxsrc);\r\n");
      out.write("       var fsh = compileShader(gl.FRAGMENT_SHADER, frgsrc);\r\n");
      out.write("       \r\n");
      out.write("       if(vsh == null || fsh == null) {\r\n");
      out.write("           return null;\r\n");
      out.write("       }\r\n");
      out.write("       \r\n");
      out.write("       var prog = gl.createProgram();\r\n");
      out.write("       gl.attachShader(prog, vsh);\r\n");
      out.write("       gl.attachShader(prog, fsh);\r\n");
      out.write("       \r\n");
      out.write("       gl.deleteShader(vsh);\r\n");
      out.write("       gl.deleteShader(fsh);\r\n");
      out.write("       \r\n");
      out.write("       gl.linkProgram(prog);\r\n");
      out.write("       if (!gl.getProgramParameter(prog, gl.LINK_STATUS)) {\r\n");
      out.write("           var errlog = gl.getProgramInfoLog(prog);\r\n");
      out.write("           console.error(errlog);\r\n");
      out.write("           return null;\r\n");
      out.write("       }\r\n");
      out.write("       \r\n");
      out.write("       if(uniformlist) {\r\n");
      out.write("           prog.uniforms = {};\r\n");
      out.write("           for(var i = 0; i < uniformlist.length; i++) {\r\n");
      out.write("               prog.uniforms[uniformlist[i]] = gl.getUniformLocation(prog, uniformlist[i]);\r\n");
      out.write("           }\r\n");
      out.write("       }\r\n");
      out.write("       \r\n");
      out.write("       if(attrlist) {\r\n");
      out.write("           prog.attributes = {};\r\n");
      out.write("           for(var i = 0; i < attrlist.length; i++) {\r\n");
      out.write("               var attr = attrlist[i];\r\n");
      out.write("               prog.attributes[attr] = gl.getAttribLocation(prog, attr);\r\n");
      out.write("           }\r\n");
      out.write("       }\r\n");
      out.write("       \r\n");
      out.write("       return prog;\r\n");
      out.write("   }\r\n");
      out.write("\r\n");
      out.write("   function useShader(prog) {\r\n");
      out.write("       gl.useProgram(prog);\r\n");
      out.write("       for(var attr in prog.attributes) {\r\n");
      out.write("           gl.enableVertexAttribArray(prog.attributes[attr]);;\r\n");
      out.write("       }\r\n");
      out.write("   }\r\n");
      out.write("\r\n");
      out.write("   function unuseShader(prog) {\r\n");
      out.write("       for(var attr in prog.attributes) {\r\n");
      out.write("           gl.disableVertexAttribArray(prog.attributes[attr]);;\r\n");
      out.write("       }\r\n");
      out.write("       gl.useProgram(null);\r\n");
      out.write("   }\r\n");
      out.write("\r\n");
      out.write("   /////\r\n");
      out.write("   var projection = {\r\n");
      out.write("       'angle':60,\r\n");
      out.write("       'nearfar':new Float32Array([0.1, 100.0]),\r\n");
      out.write("       'matrix':Matrix44.createIdentity()\r\n");
      out.write("   };\r\n");
      out.write("   var camera = {\r\n");
      out.write("       'position':Vector3.create(0, 0, 100),\r\n");
      out.write("       'lookat':Vector3.create(0, 0, 0),\r\n");
      out.write("       'up':Vector3.create(0, 1, 0),\r\n");
      out.write("       'dof':Vector3.create(10.0, 4.0, 8.0),\r\n");
      out.write("       'matrix':Matrix44.createIdentity()\r\n");
      out.write("   };\r\n");
      out.write("\r\n");
      out.write("   var pointFlower = {};\r\n");
      out.write("   var meshFlower = {};\r\n");
      out.write("   var sceneStandBy = false;\r\n");
      out.write("\r\n");
      out.write("   var BlossomParticle = function () {\r\n");
      out.write("       this.velocity = new Array(3);\r\n");
      out.write("       this.rotation = new Array(3);\r\n");
      out.write("       this.position = new Array(3);\r\n");
      out.write("       this.euler = new Array(3);\r\n");
      out.write("       this.size = 1.0;\r\n");
      out.write("       this.alpha = 1.0;\r\n");
      out.write("       this.zkey = 0.0;\r\n");
      out.write("   };\r\n");
      out.write("\r\n");
      out.write("   BlossomParticle.prototype.setVelocity = function (vx, vy, vz) {\r\n");
      out.write("       this.velocity[0] = vx;\r\n");
      out.write("       this.velocity[1] = vy;\r\n");
      out.write("       this.velocity[2] = vz;\r\n");
      out.write("   };\r\n");
      out.write("\r\n");
      out.write("   BlossomParticle.prototype.setRotation = function (rx, ry, rz) {\r\n");
      out.write("       this.rotation[0] = rx;\r\n");
      out.write("       this.rotation[1] = ry;\r\n");
      out.write("       this.rotation[2] = rz;\r\n");
      out.write("   };\r\n");
      out.write("\r\n");
      out.write("   BlossomParticle.prototype.setPosition = function (nx, ny, nz) {\r\n");
      out.write("       this.position[0] = nx;\r\n");
      out.write("       this.position[1] = ny;\r\n");
      out.write("       this.position[2] = nz;\r\n");
      out.write("   };\r\n");
      out.write("\r\n");
      out.write("   BlossomParticle.prototype.setEulerAngles = function (rx, ry, rz) {\r\n");
      out.write("       this.euler[0] = rx;\r\n");
      out.write("       this.euler[1] = ry;\r\n");
      out.write("       this.euler[2] = rz;\r\n");
      out.write("   };\r\n");
      out.write("\r\n");
      out.write("   BlossomParticle.prototype.setSize = function (s) {\r\n");
      out.write("       this.size = s;\r\n");
      out.write("   };\r\n");
      out.write("\r\n");
      out.write("   BlossomParticle.prototype.update = function (dt, et) {\r\n");
      out.write("       this.position[0] += this.velocity[0] * dt;\r\n");
      out.write("       this.position[1] += this.velocity[1] * dt;\r\n");
      out.write("       this.position[2] += this.velocity[2] * dt;\r\n");
      out.write("       \r\n");
      out.write("       this.euler[0] += this.rotation[0] * dt;\r\n");
      out.write("       this.euler[1] += this.rotation[1] * dt;\r\n");
      out.write("       this.euler[2] += this.rotation[2] * dt;\r\n");
      out.write("   };\r\n");
      out.write("\r\n");
      out.write("   function createPointFlowers() {\r\n");
      out.write("       // get point sizes\r\n");
      out.write("       var prm = gl.getParameter(gl.ALIASED_POINT_SIZE_RANGE);\r\n");
      out.write("       renderSpec.pointSize = {'min':prm[0], 'max':prm[1]};\r\n");
      out.write("       \r\n");
      out.write("       var vtxsrc = document.getElementById(\"sakura_point_vsh\").textContent;\r\n");
      out.write("       var frgsrc = document.getElementById(\"sakura_point_fsh\").textContent;\r\n");
      out.write("       \r\n");
      out.write("       pointFlower.program = createShader(\r\n");
      out.write("           vtxsrc, frgsrc,\r\n");
      out.write("           ['uProjection', 'uModelview', 'uResolution', 'uOffset', 'uDOF', 'uFade'],\r\n");
      out.write("           ['aPosition', 'aEuler', 'aMisc']\r\n");
      out.write("       );\r\n");
      out.write("       \r\n");
      out.write("       useShader(pointFlower.program);\r\n");
      out.write("       pointFlower.offset = new Float32Array([0.0, 0.0, 0.0]);\r\n");
      out.write("       pointFlower.fader = Vector3.create(0.0, 10.0, 0.0);\r\n");
      out.write("       \r\n");
      out.write("       // paramerters: velocity[3], rotate[3]\r\n");
      out.write("       pointFlower.numFlowers = 1600;\r\n");
      out.write("       pointFlower.particles = new Array(pointFlower.numFlowers);\r\n");
      out.write("       // vertex attributes {position[3], euler_xyz[3], size[1]}\r\n");
      out.write("       pointFlower.dataArray = new Float32Array(pointFlower.numFlowers * (3 + 3 + 2));\r\n");
      out.write("       pointFlower.positionArrayOffset = 0;\r\n");
      out.write("       pointFlower.eulerArrayOffset = pointFlower.numFlowers * 3;\r\n");
      out.write("       pointFlower.miscArrayOffset = pointFlower.numFlowers * 6;\r\n");
      out.write("       \r\n");
      out.write("       pointFlower.buffer = gl.createBuffer();\r\n");
      out.write("       gl.bindBuffer(gl.ARRAY_BUFFER, pointFlower.buffer);\r\n");
      out.write("       gl.bufferData(gl.ARRAY_BUFFER, pointFlower.dataArray, gl.DYNAMIC_DRAW);\r\n");
      out.write("       gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n");
      out.write("       \r\n");
      out.write("       unuseShader(pointFlower.program);\r\n");
      out.write("       \r\n");
      out.write("       for(var i = 0; i < pointFlower.numFlowers; i++) {\r\n");
      out.write("           pointFlower.particles[i] = new BlossomParticle();\r\n");
      out.write("       }\r\n");
      out.write("   }\r\n");
      out.write("\r\n");
      out.write("   function initPointFlowers() {\r\n");
      out.write("       //area\r\n");
      out.write("       pointFlower.area = Vector3.create(20.0, 20.0, 20.0);\r\n");
      out.write("       pointFlower.area.x = pointFlower.area.y * renderSpec.aspect;\r\n");
      out.write("       \r\n");
      out.write("       pointFlower.fader.x = 10.0; //env fade start\r\n");
      out.write("       pointFlower.fader.y = pointFlower.area.z; //env fade half\r\n");
      out.write("       pointFlower.fader.z = 0.1;  //near fade start\r\n");
      out.write("       \r\n");
      out.write("       //particles\r\n");
      out.write("       var PI2 = Math.PI * 2.0;\r\n");
      out.write("       var tmpv3 = Vector3.create(0, 0, 0);\r\n");
      out.write("       var tmpv = 0;\r\n");
      out.write("       var symmetryrand = function() {return (Math.random() * 2.0 - 1.0);};\r\n");
      out.write("       for(var i = 0; i < pointFlower.numFlowers; i++) {\r\n");
      out.write("           var tmpprtcl = pointFlower.particles[i];\r\n");
      out.write("           \r\n");
      out.write("           //velocity\r\n");
      out.write("           tmpv3.x = symmetryrand() * 0.3 + 0.8;\r\n");
      out.write("           tmpv3.y = symmetryrand() * 0.2 - 1.0;\r\n");
      out.write("           tmpv3.z = symmetryrand() * 0.3 + 0.5;\r\n");
      out.write("           Vector3.normalize(tmpv3);\r\n");
      out.write("           tmpv = 2.0 + Math.random() * 1.0;\r\n");
      out.write("           tmpprtcl.setVelocity(tmpv3.x * tmpv, tmpv3.y * tmpv, tmpv3.z * tmpv);\r\n");
      out.write("           \r\n");
      out.write("           //rotation\r\n");
      out.write("           tmpprtcl.setRotation(\r\n");
      out.write("               symmetryrand() * PI2 * 0.5,\r\n");
      out.write("               symmetryrand() * PI2 * 0.5,\r\n");
      out.write("               symmetryrand() * PI2 * 0.5\r\n");
      out.write("           );\r\n");
      out.write("           \r\n");
      out.write("           //position\r\n");
      out.write("           tmpprtcl.setPosition(\r\n");
      out.write("               symmetryrand() * pointFlower.area.x,\r\n");
      out.write("               symmetryrand() * pointFlower.area.y,\r\n");
      out.write("               symmetryrand() * pointFlower.area.z\r\n");
      out.write("           );\r\n");
      out.write("           \r\n");
      out.write("           //euler\r\n");
      out.write("           tmpprtcl.setEulerAngles(\r\n");
      out.write("               Math.random() * Math.PI * 2.0,\r\n");
      out.write("               Math.random() * Math.PI * 2.0,\r\n");
      out.write("               Math.random() * Math.PI * 2.0\r\n");
      out.write("           );\r\n");
      out.write("           \r\n");
      out.write("           //size\r\n");
      out.write("           tmpprtcl.setSize(0.9 + Math.random() * 0.1);\r\n");
      out.write("       }\r\n");
      out.write("   }\r\n");
      out.write("\r\n");
      out.write("   function renderPointFlowers() {\r\n");
      out.write("       //update\r\n");
      out.write("       var PI2 = Math.PI * 2.0;\r\n");
      out.write("       var limit = [pointFlower.area.x, pointFlower.area.y, pointFlower.area.z];\r\n");
      out.write("       var repeatPos = function (prt, cmp, limit) {\r\n");
      out.write("           if(Math.abs(prt.position[cmp]) - prt.size * 0.5 > limit) {\r\n");
      out.write("               //out of area\r\n");
      out.write("               if(prt.position[cmp] > 0) {\r\n");
      out.write("                   prt.position[cmp] -= limit * 2.0;\r\n");
      out.write("               }\r\n");
      out.write("               else {\r\n");
      out.write("                   prt.position[cmp] += limit * 2.0;\r\n");
      out.write("               }\r\n");
      out.write("           }\r\n");
      out.write("       };\r\n");
      out.write("       var repeatEuler = function (prt, cmp) {\r\n");
      out.write("           prt.euler[cmp] = prt.euler[cmp] % PI2;\r\n");
      out.write("           if(prt.euler[cmp] < 0.0) {\r\n");
      out.write("               prt.euler[cmp] += PI2;\r\n");
      out.write("           }\r\n");
      out.write("       };\r\n");
      out.write("       \r\n");
      out.write("       for(var i = 0; i < pointFlower.numFlowers; i++) {\r\n");
      out.write("           var prtcl = pointFlower.particles[i];\r\n");
      out.write("           prtcl.update(timeInfo.delta, timeInfo.elapsed);\r\n");
      out.write("           repeatPos(prtcl, 0, pointFlower.area.x);\r\n");
      out.write("           repeatPos(prtcl, 1, pointFlower.area.y);\r\n");
      out.write("           repeatPos(prtcl, 2, pointFlower.area.z);\r\n");
      out.write("           repeatEuler(prtcl, 0);\r\n");
      out.write("           repeatEuler(prtcl, 1);\r\n");
      out.write("           repeatEuler(prtcl, 2);\r\n");
      out.write("           \r\n");
      out.write("           prtcl.alpha = 1.0;//(pointFlower.area.z - prtcl.position[2]) * 0.5;\r\n");
      out.write("           \r\n");
      out.write("           prtcl.zkey = (camera.matrix[2] * prtcl.position[0]\r\n");
      out.write("                       + camera.matrix[6] * prtcl.position[1]\r\n");
      out.write("                       + camera.matrix[10] * prtcl.position[2]\r\n");
      out.write("                       + camera.matrix[14]);\r\n");
      out.write("       }\r\n");
      out.write("       \r\n");
      out.write("       // sort\r\n");
      out.write("       pointFlower.particles.sort(function(p0, p1){return p0.zkey - p1.zkey;});\r\n");
      out.write("       \r\n");
      out.write("       // update data\r\n");
      out.write("       var ipos = pointFlower.positionArrayOffset;\r\n");
      out.write("       var ieuler = pointFlower.eulerArrayOffset;\r\n");
      out.write("       var imisc = pointFlower.miscArrayOffset;\r\n");
      out.write("       for(var i = 0; i < pointFlower.numFlowers; i++) {\r\n");
      out.write("           var prtcl = pointFlower.particles[i];\r\n");
      out.write("           pointFlower.dataArray[ipos] = prtcl.position[0];\r\n");
      out.write("           pointFlower.dataArray[ipos + 1] = prtcl.position[1];\r\n");
      out.write("           pointFlower.dataArray[ipos + 2] = prtcl.position[2];\r\n");
      out.write("           ipos += 3;\r\n");
      out.write("           pointFlower.dataArray[ieuler] = prtcl.euler[0];\r\n");
      out.write("           pointFlower.dataArray[ieuler + 1] = prtcl.euler[1];\r\n");
      out.write("           pointFlower.dataArray[ieuler + 2] = prtcl.euler[2];\r\n");
      out.write("           ieuler += 3;\r\n");
      out.write("           pointFlower.dataArray[imisc] = prtcl.size;\r\n");
      out.write("           pointFlower.dataArray[imisc + 1] = prtcl.alpha;\r\n");
      out.write("           imisc += 2;\r\n");
      out.write("       }\r\n");
      out.write("       \r\n");
      out.write("       //draw\r\n");
      out.write("       gl.enable(gl.BLEND);\r\n");
      out.write("       //gl.disable(gl.DEPTH_TEST);\r\n");
      out.write("       gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n");
      out.write("       \r\n");
      out.write("       var prog = pointFlower.program;\r\n");
      out.write("       useShader(prog);\r\n");
      out.write("       \r\n");
      out.write("       gl.uniformMatrix4fv(prog.uniforms.uProjection, false, projection.matrix);\r\n");
      out.write("       gl.uniformMatrix4fv(prog.uniforms.uModelview, false, camera.matrix);\r\n");
      out.write("       gl.uniform3fv(prog.uniforms.uResolution, renderSpec.array);\r\n");
      out.write("       gl.uniform3fv(prog.uniforms.uDOF, Vector3.arrayForm(camera.dof));\r\n");
      out.write("       gl.uniform3fv(prog.uniforms.uFade, Vector3.arrayForm(pointFlower.fader));\r\n");
      out.write("       \r\n");
      out.write("       gl.bindBuffer(gl.ARRAY_BUFFER, pointFlower.buffer);\r\n");
      out.write("       gl.bufferData(gl.ARRAY_BUFFER, pointFlower.dataArray, gl.DYNAMIC_DRAW);\r\n");
      out.write("       \r\n");
      out.write("       gl.vertexAttribPointer(prog.attributes.aPosition, 3, gl.FLOAT, false, 0, pointFlower.positionArrayOffset * Float32Array.BYTES_PER_ELEMENT);\r\n");
      out.write("       gl.vertexAttribPointer(prog.attributes.aEuler, 3, gl.FLOAT, false, 0, pointFlower.eulerArrayOffset * Float32Array.BYTES_PER_ELEMENT);\r\n");
      out.write("       gl.vertexAttribPointer(prog.attributes.aMisc, 2, gl.FLOAT, false, 0, pointFlower.miscArrayOffset * Float32Array.BYTES_PER_ELEMENT);\r\n");
      out.write("       \r\n");
      out.write("       // doubler\r\n");
      out.write("       for(var i = 1; i < 2; i++) {\r\n");
      out.write("           var zpos = i * -2.0;\r\n");
      out.write("           pointFlower.offset[0] = pointFlower.area.x * -1.0;\r\n");
      out.write("           pointFlower.offset[1] = pointFlower.area.y * -1.0;\r\n");
      out.write("           pointFlower.offset[2] = pointFlower.area.z * zpos;\r\n");
      out.write("           gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\r\n");
      out.write("           gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\r\n");
      out.write("           \r\n");
      out.write("           pointFlower.offset[0] = pointFlower.area.x * -1.0;\r\n");
      out.write("           pointFlower.offset[1] = pointFlower.area.y *  1.0;\r\n");
      out.write("           pointFlower.offset[2] = pointFlower.area.z * zpos;\r\n");
      out.write("           gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\r\n");
      out.write("           gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\r\n");
      out.write("           \r\n");
      out.write("           pointFlower.offset[0] = pointFlower.area.x *  1.0;\r\n");
      out.write("           pointFlower.offset[1] = pointFlower.area.y * -1.0;\r\n");
      out.write("           pointFlower.offset[2] = pointFlower.area.z * zpos;\r\n");
      out.write("           gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\r\n");
      out.write("           gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\r\n");
      out.write("           \r\n");
      out.write("           pointFlower.offset[0] = pointFlower.area.x *  1.0;\r\n");
      out.write("           pointFlower.offset[1] = pointFlower.area.y *  1.0;\r\n");
      out.write("           pointFlower.offset[2] = pointFlower.area.z * zpos;\r\n");
      out.write("           gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\r\n");
      out.write("           gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\r\n");
      out.write("       }\r\n");
      out.write("       \r\n");
      out.write("       //main\r\n");
      out.write("       pointFlower.offset[0] = 0.0;\r\n");
      out.write("       pointFlower.offset[1] = 0.0;\r\n");
      out.write("       pointFlower.offset[2] = 0.0;\r\n");
      out.write("       gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\r\n");
      out.write("       gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\r\n");
      out.write("       \r\n");
      out.write("       gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n");
      out.write("       unuseShader(prog);\r\n");
      out.write("       \r\n");
      out.write("       gl.enable(gl.DEPTH_TEST);\r\n");
      out.write("       gl.disable(gl.BLEND);\r\n");
      out.write("   }\r\n");
      out.write("\r\n");
      out.write("   // effects\r\n");
      out.write("   //common util\r\n");
      out.write("   function createEffectProgram(vtxsrc, frgsrc, exunifs, exattrs) {\r\n");
      out.write("       var ret = {};\r\n");
      out.write("       var unifs = ['uResolution', 'uSrc', 'uDelta'];\r\n");
      out.write("       if(exunifs) {\r\n");
      out.write("           unifs = unifs.concat(exunifs);\r\n");
      out.write("       }\r\n");
      out.write("       var attrs = ['aPosition'];\r\n");
      out.write("       if(exattrs) {\r\n");
      out.write("           attrs = attrs.concat(exattrs);\r\n");
      out.write("       }\r\n");
      out.write("       \r\n");
      out.write("       ret.program = createShader(vtxsrc, frgsrc, unifs, attrs);\r\n");
      out.write("       useShader(ret.program);\r\n");
      out.write("       \r\n");
      out.write("       ret.dataArray = new Float32Array([\r\n");
      out.write("           -1.0, -1.0,\r\n");
      out.write("            1.0, -1.0,\r\n");
      out.write("           -1.0,  1.0,\r\n");
      out.write("            1.0,  1.0\r\n");
      out.write("       ]);\r\n");
      out.write("       ret.buffer = gl.createBuffer();\r\n");
      out.write("       gl.bindBuffer(gl.ARRAY_BUFFER, ret.buffer);\r\n");
      out.write("       gl.bufferData(gl.ARRAY_BUFFER, ret.dataArray, gl.STATIC_DRAW);\r\n");
      out.write("       \r\n");
      out.write("       gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n");
      out.write("       unuseShader(ret.program);\r\n");
      out.write("       \r\n");
      out.write("       return ret;\r\n");
      out.write("   }\r\n");
      out.write("\r\n");
      out.write("   // basic usage\r\n");
      out.write("   // useEffect(prog, srctex({'texture':texid, 'dtxArray':(f32)[dtx, dty]})); //basic initialize\r\n");
      out.write("   // gl.uniform**(...); //additional uniforms\r\n");
      out.write("   // drawEffect()\r\n");
      out.write("   // unuseEffect(prog)\r\n");
      out.write("   // TEXTURE0 makes src\r\n");
      out.write("   function useEffect(fxobj, srctex) {\r\n");
      out.write("       var prog = fxobj.program;\r\n");
      out.write("       useShader(prog);\r\n");
      out.write("       gl.uniform3fv(prog.uniforms.uResolution, renderSpec.array);\r\n");
      out.write("       \r\n");
      out.write("       if(srctex != null) {\r\n");
      out.write("           gl.uniform2fv(prog.uniforms.uDelta, srctex.dtxArray);\r\n");
      out.write("           gl.uniform1i(prog.uniforms.uSrc, 0);\r\n");
      out.write("           \r\n");
      out.write("           gl.activeTexture(gl.TEXTURE0);\r\n");
      out.write("           gl.bindTexture(gl.TEXTURE_2D, srctex.texture);\r\n");
      out.write("       }\r\n");
      out.write("   }\r\n");
      out.write("   function drawEffect(fxobj) {\r\n");
      out.write("       gl.bindBuffer(gl.ARRAY_BUFFER, fxobj.buffer);\r\n");
      out.write("       gl.vertexAttribPointer(fxobj.program.attributes.aPosition, 2, gl.FLOAT, false, 0, 0);\r\n");
      out.write("       gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\r\n");
      out.write("   }\r\n");
      out.write("   function unuseEffect(fxobj) {\r\n");
      out.write("       unuseShader(fxobj.program);\r\n");
      out.write("   }\r\n");
      out.write("\r\n");
      out.write("   var effectLib = {};\r\n");
      out.write("   function createEffectLib() {\r\n");
      out.write("       \r\n");
      out.write("       var vtxsrc, frgsrc;\r\n");
      out.write("       //common\r\n");
      out.write("       var cmnvtxsrc = document.getElementById(\"fx_common_vsh\").textContent;\r\n");
      out.write("       \r\n");
      out.write("       //background\r\n");
      out.write("       frgsrc = document.getElementById(\"bg_fsh\").textContent;\r\n");
      out.write("       effectLib.sceneBg = createEffectProgram(cmnvtxsrc, frgsrc, ['uTimes'], null);\r\n");
      out.write("       \r\n");
      out.write("       // make brightpixels buffer\r\n");
      out.write("       frgsrc = document.getElementById(\"fx_brightbuf_fsh\").textContent;\r\n");
      out.write("       effectLib.mkBrightBuf = createEffectProgram(cmnvtxsrc, frgsrc, null, null);\r\n");
      out.write("       \r\n");
      out.write("       // direction blur\r\n");
      out.write("       frgsrc = document.getElementById(\"fx_dirblur_r4_fsh\").textContent;\r\n");
      out.write("       effectLib.dirBlur = createEffectProgram(cmnvtxsrc, frgsrc, ['uBlurDir'], null);\r\n");
      out.write("       \r\n");
      out.write("       //final composite\r\n");
      out.write("       vtxsrc = document.getElementById(\"pp_final_vsh\").textContent;\r\n");
      out.write("       frgsrc = document.getElementById(\"pp_final_fsh\").textContent;\r\n");
      out.write("       effectLib.finalComp = createEffectProgram(vtxsrc, frgsrc, ['uBloom'], null);\r\n");
      out.write("   }\r\n");
      out.write("\r\n");
      out.write("   // background\r\n");
      out.write("   function createBackground() {\r\n");
      out.write("       //console.log(\"create background\");\r\n");
      out.write("   }\r\n");
      out.write("   function initBackground() {\r\n");
      out.write("       //console.log(\"init background\");\r\n");
      out.write("   }\r\n");
      out.write("   function renderBackground() {\r\n");
      out.write("       gl.disable(gl.DEPTH_TEST);\r\n");
      out.write("       \r\n");
      out.write("       useEffect(effectLib.sceneBg, null);\r\n");
      out.write("       gl.uniform2f(effectLib.sceneBg.program.uniforms.uTimes, timeInfo.elapsed, timeInfo.delta);\r\n");
      out.write("       drawEffect(effectLib.sceneBg);\r\n");
      out.write("       unuseEffect(effectLib.sceneBg);\r\n");
      out.write("       \r\n");
      out.write("       gl.enable(gl.DEPTH_TEST);\r\n");
      out.write("   }\r\n");
      out.write("\r\n");
      out.write("   // post process\r\n");
      out.write("   var postProcess = {};\r\n");
      out.write("   function createPostProcess() {\r\n");
      out.write("       //console.log(\"create post process\");\r\n");
      out.write("   }\r\n");
      out.write("   function initPostProcess() {\r\n");
      out.write("       //console.log(\"init post process\");\r\n");
      out.write("   }\r\n");
      out.write("\r\n");
      out.write("   function renderPostProcess() {\r\n");
      out.write("       gl.enable(gl.TEXTURE_2D);\r\n");
      out.write("       gl.disable(gl.DEPTH_TEST);\r\n");
      out.write("       var bindRT = function (rt, isclear) {\r\n");
      out.write("           gl.bindFramebuffer(gl.FRAMEBUFFER, rt.frameBuffer);\r\n");
      out.write("           gl.viewport(0, 0, rt.width, rt.height);\r\n");
      out.write("           if(isclear) {\r\n");
      out.write("               gl.clearColor(0, 0, 0, 0);\r\n");
      out.write("               gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n");
      out.write("           }\r\n");
      out.write("       };\r\n");
      out.write("       \r\n");
      out.write("       //make bright buff\r\n");
      out.write("       bindRT(renderSpec.wHalfRT0, true);\r\n");
      out.write("       useEffect(effectLib.mkBrightBuf, renderSpec.mainRT);\r\n");
      out.write("       drawEffect(effectLib.mkBrightBuf);\r\n");
      out.write("       unuseEffect(effectLib.mkBrightBuf);\r\n");
      out.write("       \r\n");
      out.write("       // make bloom\r\n");
      out.write("       for(var i = 0; i < 2; i++) {\r\n");
      out.write("           var p = 1.5 + 1 * i;\r\n");
      out.write("           var s = 2.0 + 1 * i;\r\n");
      out.write("           bindRT(renderSpec.wHalfRT1, true);\r\n");
      out.write("           useEffect(effectLib.dirBlur, renderSpec.wHalfRT0);\r\n");
      out.write("           gl.uniform4f(effectLib.dirBlur.program.uniforms.uBlurDir, p, 0.0, s, 0.0);\r\n");
      out.write("           drawEffect(effectLib.dirBlur);\r\n");
      out.write("           unuseEffect(effectLib.dirBlur);\r\n");
      out.write("           \r\n");
      out.write("           bindRT(renderSpec.wHalfRT0, true);\r\n");
      out.write("           useEffect(effectLib.dirBlur, renderSpec.wHalfRT1);\r\n");
      out.write("           gl.uniform4f(effectLib.dirBlur.program.uniforms.uBlurDir, 0.0, p, 0.0, s);\r\n");
      out.write("           drawEffect(effectLib.dirBlur);\r\n");
      out.write("           unuseEffect(effectLib.dirBlur);\r\n");
      out.write("       }\r\n");
      out.write("       \r\n");
      out.write("       //display\r\n");
      out.write("       gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n");
      out.write("       gl.viewport(0, 0, renderSpec.width, renderSpec.height);\r\n");
      out.write("       gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n");
      out.write("       \r\n");
      out.write("       useEffect(effectLib.finalComp, renderSpec.mainRT);\r\n");
      out.write("       gl.uniform1i(effectLib.finalComp.program.uniforms.uBloom, 1);\r\n");
      out.write("       gl.activeTexture(gl.TEXTURE1);\r\n");
      out.write("       gl.bindTexture(gl.TEXTURE_2D, renderSpec.wHalfRT0.texture);\r\n");
      out.write("       drawEffect(effectLib.finalComp);\r\n");
      out.write("       unuseEffect(effectLib.finalComp);\r\n");
      out.write("       \r\n");
      out.write("       gl.enable(gl.DEPTH_TEST);\r\n");
      out.write("   }\r\n");
      out.write("\r\n");
      out.write("   /////\r\n");
      out.write("   var SceneEnv = {};\r\n");
      out.write("   function createScene() {\r\n");
      out.write("       createEffectLib();\r\n");
      out.write("       createBackground();\r\n");
      out.write("       createPointFlowers();\r\n");
      out.write("       createPostProcess();\r\n");
      out.write("       sceneStandBy = true;\r\n");
      out.write("   }\r\n");
      out.write("\r\n");
      out.write("   function initScene() {\r\n");
      out.write("       initBackground();\r\n");
      out.write("       initPointFlowers();\r\n");
      out.write("       initPostProcess();\r\n");
      out.write("       \r\n");
      out.write("       //camera.position.z = 17.320508;\r\n");
      out.write("       camera.position.z = pointFlower.area.z + projection.nearfar[0];\r\n");
      out.write("       projection.angle = Math.atan2(pointFlower.area.y, camera.position.z + pointFlower.area.z) * 180.0 / Math.PI * 2.0;\r\n");
      out.write("       Matrix44.loadProjection(projection.matrix, renderSpec.aspect, projection.angle, projection.nearfar[0], projection.nearfar[1]);\r\n");
      out.write("   }\r\n");
      out.write("\r\n");
      out.write("   function renderScene() {\r\n");
      out.write("       //draw\r\n");
      out.write("       Matrix44.loadLookAt(camera.matrix, camera.position, camera.lookat, camera.up);\r\n");
      out.write("       \r\n");
      out.write("       gl.enable(gl.DEPTH_TEST);\r\n");
      out.write("       \r\n");
      out.write("       //gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n");
      out.write("       gl.bindFramebuffer(gl.FRAMEBUFFER, renderSpec.mainRT.frameBuffer);\r\n");
      out.write("       gl.viewport(0, 0, renderSpec.mainRT.width, renderSpec.mainRT.height);\r\n");
      out.write("       gl.clearColor(0.005, 0, 0.05, 0);\r\n");
      out.write("       gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n");
      out.write("       \r\n");
      out.write("       renderBackground();\r\n");
      out.write("       renderPointFlowers();\r\n");
      out.write("       renderPostProcess();\r\n");
      out.write("   }\r\n");
      out.write("\r\n");
      out.write("   /////\r\n");
      out.write("   function onResize(e) {\r\n");
      out.write("       makeCanvasFullScreen(document.getElementById(\"sakura\"));\r\n");
      out.write("       setViewports();\r\n");
      out.write("       if(sceneStandBy) {\r\n");
      out.write("           initScene();\r\n");
      out.write("       }\r\n");
      out.write("   }\r\n");
      out.write("\r\n");
      out.write("   function setViewports() {\r\n");
      out.write("       renderSpec.setSize(gl.canvas.width, gl.canvas.height);\r\n");
      out.write("       \r\n");
      out.write("       gl.clearColor(0.2, 0.2, 0.5, 1.0);\r\n");
      out.write("       gl.viewport(0, 0, renderSpec.width, renderSpec.height);\r\n");
      out.write("       \r\n");
      out.write("       var rtfunc = function (rtname, rtw, rth) {\r\n");
      out.write("           var rt = renderSpec[rtname];\r\n");
      out.write("           if(rt) deleteRenderTarget(rt);\r\n");
      out.write("           renderSpec[rtname] = createRenderTarget(rtw, rth);\r\n");
      out.write("       };\r\n");
      out.write("       rtfunc('mainRT', renderSpec.width, renderSpec.height);\r\n");
      out.write("       rtfunc('wFullRT0', renderSpec.width, renderSpec.height);\r\n");
      out.write("       rtfunc('wFullRT1', renderSpec.width, renderSpec.height);\r\n");
      out.write("       rtfunc('wHalfRT0', renderSpec.halfWidth, renderSpec.halfHeight);\r\n");
      out.write("       rtfunc('wHalfRT1', renderSpec.halfWidth, renderSpec.halfHeight);\r\n");
      out.write("   }\r\n");
      out.write("\r\n");
      out.write("   function render() {\r\n");
      out.write("       renderScene();\r\n");
      out.write("   }\r\n");
      out.write("\r\n");
      out.write("   var animating = true;\r\n");
      out.write("   function toggleAnimation(elm) {\r\n");
      out.write("       animating ^= true;\r\n");
      out.write("       if(animating) animate();\r\n");
      out.write("       if(elm) {\r\n");
      out.write("           elm.innerHTML = animating? \"Stop\":\"Start\";\r\n");
      out.write("       }\r\n");
      out.write("   }\r\n");
      out.write("\r\n");
      out.write("   function stepAnimation() {\r\n");
      out.write("       if(!animating) animate();\r\n");
      out.write("   }\r\n");
      out.write("\r\n");
      out.write("   function animate() {\r\n");
      out.write("       var curdate = new Date();\r\n");
      out.write("       timeInfo.elapsed = (curdate - timeInfo.start) / 1000.0;\r\n");
      out.write("       timeInfo.delta = (curdate - timeInfo.prev) / 1000.0;\r\n");
      out.write("       timeInfo.prev = curdate;\r\n");
      out.write("       \r\n");
      out.write("       if(animating) requestAnimationFrame(animate);\r\n");
      out.write("       render();\r\n");
      out.write("   }\r\n");
      out.write("\r\n");
      out.write("   function makeCanvasFullScreen(canvas) {\r\n");
      out.write("       var b = document.body;\r\n");
      out.write("      var d = document.documentElement;\r\n");
      out.write("      fullw = Math.max(b.clientWidth , b.scrollWidth, d.scrollWidth, d.clientWidth);\r\n");
      out.write("      fullh = Math.max(b.clientHeight , b.scrollHeight, d.scrollHeight, d.clientHeight);\r\n");
      out.write("      canvas.width = fullw;\r\n");
      out.write("      canvas.height = fullh;\r\n");
      out.write("   }\r\n");
      out.write("\r\n");
      out.write("   window.addEventListener('load', function(e) {\r\n");
      out.write("       var canvas = document.getElementById(\"sakura\");\r\n");
      out.write("       try {\r\n");
      out.write("           makeCanvasFullScreen(canvas);\r\n");
      out.write("           gl = canvas.getContext('experimental-webgl');\r\n");
      out.write("       } catch(e) {\r\n");
      out.write("           console.error(e);\r\n");
      out.write("           return;\r\n");
      out.write("       }\r\n");
      out.write("       \r\n");
      out.write("       window.addEventListener('resize', onResize);\r\n");
      out.write("       \r\n");
      out.write("       setViewports();\r\n");
      out.write("       createScene();\r\n");
      out.write("       initScene();\r\n");
      out.write("       \r\n");
      out.write("       timeInfo.start = new Date();\r\n");
      out.write("       timeInfo.prev = timeInfo.start;\r\n");
      out.write("       animate();\r\n");
      out.write("   });\r\n");
      out.write("\r\n");
      out.write("   //set window.requestAnimationFrame\r\n");
      out.write("   (function (w, r) {\r\n");
      out.write("       w['r'+r] = w['r'+r] || w['webkitR'+r] || w['mozR'+r] || w['msR'+r] || w['oR'+r] || function(c){ w.setTimeout(c, 1000 / 60); };\r\n");
      out.write("   })(window, 'equestAnimationFrame');\r\n");
      out.write("   \r\n");
      out.write("</script>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
